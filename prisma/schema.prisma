// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById Int

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       Int  @id @default(autoincrement())
  userId                   Int
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int   @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int    @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  displayName   String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  chats         Chat[]
  room          Room[]
  book          Book[]
  likes         Like[]
  notes         Note[]
  comments      Comment[]
  feedbacks     Feedback[]
  feedbackReactions FeedbackReaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Room {
  id        Int   @id @default(autoincrement())
  ownerId   Int
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chats     Chat[]
  tags      Tag[]
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Chat {
  id        Int   @id @default(autoincrement())
  content   String
  roomId    Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
  id        Int   @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room[]
}

model BookAPI {
  isbn            String   @unique @id
  affiliateUrl    String
  author          String
  authorKana      String
  availability    String
  booksGenreId    String
  chirayomiUrl    String
  contents        String
  discountPrice   Int
  discountRate    Int
  itemCaption     String
  itemPrice       Int
  itemUrl         String
  largeImageUrl   String
  limitedFlag     Int
  listPrice       Int
  mediumImageUrl  String
  postageFlag     Int
  publisherName   String
  reviewAverage   String
  reviewCount     Int
  salesDate       String
  seriesName      String
  seriesNameKana  String
  size            String
  smallImageUrl   String
  subTitle        String
  subTitleKana    String
  title           String
  titleKana       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Book {
  id        Int        @id @default(autoincrement())
  isbn      String
  userId    Int
  status    BookStatus
  notes     Note[]
  timelines Timeline[]
  characters Character[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([isbn, userId])
}

enum BookStatus {
  READING
  TO_READ
  INTERESTED
  FINISHED
  FAVORITE
}


model BookThread {
  id        Int    @id @default(autoincrement())
  isbn      String
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  thread    BookThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId  Int
  parent    Comment?  @relation("ReplyTo", fields: [parentId], references: [id])
  parentId  Int?
  replies   Comment[] @relation("ReplyTo")
  likes     Like[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
}

model Note {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  isPublic  Boolean  @default(false)
  bookId    Int
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  attachments Attachment[]
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Attachment {
  id        Int      @id @default(autoincrement())
  fileName  String
  filePath  String
  mimeType  String
  noteId    Int
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  feedbackReactions FeedbackReaction[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FeedbackReaction {
  id         Int      @id @default(autoincrement())
  feedbackId Int
  userId     Int
  type       ReactionType
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([feedbackId, userId])
}

enum ReactionType {
  LIKE
  DISLIKE
}

model Timeline {
  id        Int       @id @default(autoincrement())
  title     String
  date      DateTime
  bookId    Int
  book      Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  events    Event[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Character {
  id            Int       @id @default(autoincrement())
  name          String
  color         String
  age           Int?
  gender        String?
  personality   String?
  background    String?
  relationships String?
  bookId        Int
  book          Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  events        Event[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Event {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  startTime   DateTime
  endTime     DateTime
  characterId Int
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  timelineId  Int
  timeline    Timeline  @relation(fields: [timelineId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
